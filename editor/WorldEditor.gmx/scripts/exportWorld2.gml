/// exportWorld2(name, save image, save copy);

var name = argument0;
var savei = argument1;
var savec = argument2;

var error = false;
for (var i = 0; i < ds_list_size(region); i++) {
    if (region.type == 0) {
        if (!(instance_exists(region[| i].chunks[0]) && instance_exists(region[| i].chunks[1])))
        {
            error = true;
        }
    }
    else {
        for (var a = 0; a < MAX_CHUNKS_IN_REGION; a++) {
            if (!instance_exists(region[| i].chunks[a])) {
                error = true;
            }
        }
    }
}

if (error) {
    show_message("Error: Cannot export world!#Must define all chunks for every region!");
    exit;
}

// prepare list of used chunks
var used_chunks = ds_list_create();

with objChunk {
    is_used = false;
}

/*with objRegion {
    event_user(0);
}*/
for (var i = 0; i < ds_list_size(region); i++) {
    with region[| i] {
        event_user(0);
    }
}
/*with objSpecChunk {
    event_user(0);
}*/
for (var i = 0; i < ds_list_size(specchunk); i++) {
    with specchunk[| i] {
        event_user(0);
    }
}

for (var i = 0; i < ds_list_size(chunk); i++) {
    if (chunk[| i].is_used) {
        ds_list_add(used_chunks, chunk[| i]);
        used_chunks[| ds_list_size(used_chunks) - 1].used_index = ds_list_size(used_chunks) - 1;
    }
}

// open file to write to
var file = file_text_open_write("saves\" + name + ".h");

wl(file, "\pinclude \qplayer.h\q

\pifndef WORLDDATA_H
\pdefine WORLDDATA_H
/// The below code was generated by
/// the Arduventure World Editor
/// created by Gavin Atkin 2016-2017
");
wl(file, "

const int PLAYER_START_X = " + string(player_x) + ";
const int PLAYER_START_Y = " + string(player_y) + ";
");
        
        writeChunks(file, used_chunks);
        file_text_writeln(file);
        
        var spr;
        var inum;
        if (sprite_exists(custom_tiles)) {
            spr = custom_tiles;
            inum = sprite_get_number(custom_tiles);
        }
        else {
            spr = sprTiles;
            inum = sprite_get_number(sprTiles);
        }
        var tiles;
        tiles[9999] = 0;
        //spriteToBytes(spr, tiles);
        writeTiles(file, spr, tiles, inum, sprite_get_width(spr), sprite_get_height(spr));
        
        writeRegions(file, savei);
        wl(file, "
        
void drawTiles()
{
  int cx = (cam.x >> 4) << 4;
  int cy = (cam.y >> 4) << 4;
  for (int x = 0; x <= 128; x += 16)
  {
     for (int y = 0; y <= 64; y += 16)
     {
        int ccx = cx + x;
        int ccy = cy + y;
        Point pos = {.x = cam.x + x, .y = cam.y + y };
        byte tile = getTileID(pos);
        sprites.drawOverwrite(ccx - cam.x, ccy - cam.y, bm_tileset, tile);
     }
  }
}
");

writeDoors(file);
        
wl(file, "\pendif");
        
// delete list - close files
file_text_close(file);

if (savec) {
    var savename = get_save_filename_ext("C++ Header File|*.h|C++ Source File|*.cpp", world_internal_name + ".h", program_directory, "Save copy as...");
    if (is_string(savename) && string_length(savename) > 0) {
        file_copy("saves\" + name + ".h", savename);
        //file_copy("saves\" + world_external_name + "_world.png", filename_path(savename) + stringChopN(savename, ".", 0) + ".png")
    }
}

ds_list_destroy(used_chunks);
