#include "player.h"

#ifndef WORLDDATA_H
#define WORLDDATA_H
/// The below code was generated by
/// the Arduventure World Editor
/// created by Gavin Atkin 2016-2017



const int PLAYER_START_X = 2240;
const int PLAYER_START_Y = 2976;

const unsigned char PROGMEM chunks[] = 
{
   // number of chunks: 82
   // number of tiles in chunks: 36
   // space used by chunks: 2952 bytes
   // chunk: 0
   // chunk name: CA0000
  0x17, 0x15, 0x05, 0x00, 0x16, 0x17, 
  0x1C, 0x1D, 0x00, 0x05, 0x1B, 0x1C, 
  0x05, 0x06, 0x05, 0x05, 0x05, 0x00, 
  0x05, 0x05, 0x05, 0x00, 0x05, 0x05, 
  0x14, 0x05, 0x1E, 0x05, 0x06, 0x13, 
  0x12, 0x14, 0x06, 0x05, 0x13, 0x11, 
   // chunk: 1
   // chunk name: CA0001
  0x17, 0x15, 0x05, 0x00, 0x16, 0x10, 
  0x1C, 0x1D, 0x00, 0x05, 0x1B, 0x18, 
  0x05, 0x06, 0x05, 0x00, 0x1E, 0x18, 
  0x05, 0x05, 0x05, 0x00, 0x05, 0x18, 
  0x14, 0x05, 0x05, 0x05, 0x06, 0x18, 
  0x12, 0x14, 0x06, 0x05, 0x13, 0x11, 
   // chunk: 2
   // chunk name: CA0010
  0x17, 0x17, 0x10, 0x0F, 0x17, 0x17, 
  0x1C, 0x1C, 0x16, 0x15, 0x1C, 0x1C, 
  0x05, 0x06, 0x1B, 0x1D, 0x05, 0x00, 
  0x05, 0x05, 0x05, 0x00, 0x05, 0x05, 
  0x14, 0x05, 0x05, 0x05, 0x06, 0x13, 
  0x12, 0x14, 0x06, 0x05, 0x13, 0x11, 
   // chunk: 3
   // chunk name: CA0011
  0x17, 0x17, 0x17, 0x17, 0x10, 0x04, 
  0x1C, 0x1C, 0x1C, 0x1C, 0x16, 0x10, 
  0x05, 0x06, 0x00, 0x05, 0x1B, 0x18, 
  0x05, 0x05, 0x05, 0x00, 0x05, 0x18, 
  0x14, 0x05, 0x05, 0x05, 0x06, 0x18, 
  0x12, 0x14, 0x06, 0x05, 0x13, 0x11, 
   // chunk: 4
   // chunk name: CA0100
  0x05, 0x1A, 0x05, 0x00, 0x16, 0x17, 
  0x0F, 0x15, 0x00, 0x05, 0x1B, 0x1C, 
  0x1A, 0x1D, 0x05, 0x05, 0x05, 0x00, 
  0x1A, 0x1E, 0x00, 0x00, 0x05, 0x05, 
  0x1A, 0x05, 0x05, 0x05, 0x06, 0x13, 
  0x12, 0x14, 0x06, 0x05, 0x13, 0x11, 
   // chunk: 5
   // chunk name: CA0101
  0x0F, 0x15, 0x05, 0x00, 0x16, 0x10, 
  0x1A, 0x1D, 0x00, 0x05, 0x1B, 0x18, 
  0x1A, 0x06, 0x05, 0x05, 0x00, 0x18, 
  0x1A, 0x05, 0x05, 0x00, 0x05, 0x18, 
  0x1A, 0x00, 0x05, 0x05, 0x06, 0x18, 
  0x12, 0x14, 0x06, 0x05, 0x13, 0x11, 
   // chunk: 6
   // chunk name: CA0110
  0x05, 0x00, 0x05, 0x06, 0x0F, 0x17, 
  0x05, 0x06, 0x0F, 0x17, 0x15, 0x1C, 
  0x0F, 0x17, 0x15, 0x1C, 0x1D, 0x00, 
  0x1A, 0x1C, 0x1D, 0x00, 0x05, 0x05, 
  0x1A, 0x05, 0x05, 0x05, 0x06, 0x13, 
  0x12, 0x14, 0x06, 0x05, 0x13, 0x11, 
   // chunk: 7
   // chunk name: CA0111
  0x05, 0x0F, 0x17, 0x17, 0x17, 0x10, 
  0x0F, 0x15, 0x2A, 0x2A, 0x2A, 0x18, 
  0x1A, 0x1D, 0x27, 0x28, 0x27, 0x18, 
  0x1A, 0x05, 0x05, 0x00, 0x05, 0x18, 
  0x1A, 0x33, 0x05, 0x05, 0x13, 0x11, 
  0x12, 0x14, 0x06, 0x05, 0x18, 0x06, 
   // chunk: 8
   // chunk name: CA1000
  0x17, 0x15, 0x05, 0x00, 0x16, 0x17, 
  0x1C, 0x1D, 0x00, 0x05, 0x1B, 0x1C, 
  0x05, 0x06, 0x00, 0x05, 0x05, 0x00, 
  0x00, 0x05, 0x05, 0x00, 0x05, 0x05, 
  0x19, 0x14, 0x00, 0x05, 0x06, 0x13, 
  0x05, 0x12, 0x19, 0x19, 0x19, 0x11, 
   // chunk: 9
   // chunk name: CA1001
  0x17, 0x15, 0x05, 0x00, 0x16, 0x10, 
  0x1C, 0x1D, 0x00, 0x05, 0x1B, 0x18, 
  0x05, 0x06, 0x05, 0x05, 0x1E, 0x18, 
  0x05, 0x05, 0x13, 0x19, 0x14, 0x18, 
  0x19, 0x19, 0x11, 0x05, 0x12, 0x11, 
  0x05, 0x00, 0x05, 0x06, 0x00, 0x05, 
   // chunk: 10
   // chunk name: CA1010
  0x17, 0x10, 0x00, 0x05, 0x0F, 0x17, 
  0x1C, 0x16, 0x17, 0x17, 0x15, 0x1C, 
  0x05, 0x1B, 0x1C, 0x1C, 0x1D, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x14, 0x05, 0x05, 0x05, 0x06, 0x13, 
  0x12, 0x19, 0x19, 0x19, 0x19, 0x11, 
   // chunk: 11
   // chunk name: CA1011
  0x17, 0x17, 0x17, 0x09, 0x10, 0x05, 
  0x1C, 0x1C, 0x1C, 0x09, 0x16, 0x10, 
  0x05, 0x06, 0x05, 0x05, 0x1B, 0x18, 
  0x05, 0x05, 0x05, 0x00, 0x05, 0x18, 
  0x14, 0x05, 0x1E, 0x05, 0x06, 0x18, 
  0x12, 0x19, 0x19, 0x19, 0x19, 0x11, 
   // chunk: 12
   // chunk name: CA1100
  0x0F, 0x15, 0x05, 0x00, 0x16, 0x17, 
  0x1A, 0x1D, 0x00, 0x05, 0x1B, 0x1C, 
  0x1A, 0x06, 0x05, 0x05, 0x05, 0x00, 
  0x12, 0x14, 0x05, 0x00, 0x05, 0x05, 
  0x05, 0x12, 0x14, 0x05, 0x06, 0x13, 
  0x05, 0x06, 0x12, 0x19, 0x19, 0x11, 
   // chunk: 13
   // chunk name: CA1101
  0x0F, 0x15, 0x05, 0x00, 0x16, 0x10, 
  0x1A, 0x1D, 0x00, 0x05, 0x1B, 0x18, 
  0x1A, 0x06, 0x05, 0x05, 0x05, 0x18, 
  0x1A, 0x00, 0x05, 0x00, 0x05, 0x18, 
  0x1A, 0x05, 0x05, 0x05, 0x13, 0x11, 
  0x12, 0x19, 0x19, 0x19, 0x11, 0x06, 
   // chunk: 14
   // chunk name: CA1110
  0x0F, 0x17, 0x10, 0x0F, 0x17, 0x17, 
  0x1A, 0x1C, 0x16, 0x15, 0x1C, 0x1C, 
  0x1A, 0x06, 0x1B, 0x1D, 0x05, 0x00, 
  0x1A, 0x05, 0x05, 0x00, 0x05, 0x05, 
  0x12, 0x14, 0x05, 0x05, 0x06, 0x13, 
  0x06, 0x12, 0x19, 0x19, 0x19, 0x11, 
   // chunk: 15
   // chunk name: CA1111
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x06, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x06, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
   // chunk: 16
   // chunk name: FT0000
  0x20, 0x22, 0x00, 0x03, 0x00, 0x00, 
  0x24, 0x23, 0x07, 0x04, 0x01, 0x00, 
  0x03, 0x04, 0x03, 0x03, 0x03, 0x03, 
  0x01, 0x07, 0x04, 0x03, 0x04, 0x00, 
  0x00, 0x20, 0x22, 0x03, 0x00, 0x07, 
  0x00, 0x24, 0x23, 0x04, 0x00, 0x00, 
   // chunk: 17
   // chunk name: FT0001
  0x00, 0x00, 0x00, 0x03, 0x20, 0x22, 
  0x00, 0x01, 0x04, 0x20, 0x26, 0x23, 
  0x03, 0x03, 0x03, 0x24, 0x25, 0x22, 
  0x00, 0x00, 0x01, 0x03, 0x24, 0x23, 
  0x00, 0x07, 0x00, 0x03, 0x20, 0x22, 
  0x00, 0x00, 0x00, 0x03, 0x24, 0x23, 
   // chunk: 18
   // chunk name: FT0010
  0x20, 0x22, 0x20, 0x22, 0x20, 0x22, 
  0x24, 0x25, 0x26, 0x25, 0x26, 0x23, 
  0x04, 0x24, 0x23, 0x24, 0x23, 0x04, 
  0x01, 0x03, 0x04, 0x03, 0x04, 0x03, 
  0x00, 0x01, 0x00, 0x03, 0x20, 0x22, 
  0x07, 0x00, 0x00, 0x03, 0x24, 0x23, 
   // chunk: 19
   // chunk name: FT0011
  0x00, 0x20, 0x22, 0x01, 0x20, 0x22, 
  0x07, 0x24, 0x23, 0x20, 0x26, 0x23, 
  0x03, 0x03, 0x02, 0x24, 0x23, 0x01, 
  0x00, 0x04, 0x03, 0x02, 0x20, 0x22, 
  0x20, 0x22, 0x03, 0x04, 0x24, 0x23, 
  0x24, 0x23, 0x00, 0x03, 0x00, 0x00, 
   // chunk: 20
   // chunk name: FT0100
  0x20, 0x22, 0x07, 0x03, 0x00, 0x00, 
  0x24, 0x25, 0x22, 0x03, 0x04, 0x07, 
  0x20, 0x26, 0x25, 0x22, 0x03, 0x03, 
  0x24, 0x25, 0x26, 0x23, 0x04, 0x00, 
  0x20, 0x26, 0x23, 0x03, 0x04, 0x00, 
  0x24, 0x23, 0x07, 0x03, 0x00, 0x00, 
   // chunk: 21
   // chunk name: FT0101
  0x20, 0x22, 0x07, 0x03, 0x20, 0x22, 
  0x24, 0x25, 0x22, 0x03, 0x24, 0x23, 
  0x20, 0x26, 0x23, 0x04, 0x20, 0x22, 
  0x24, 0x23, 0x01, 0x03, 0x24, 0x23, 
  0x20, 0x22, 0x00, 0x04, 0x20, 0x22, 
  0x24, 0x23, 0x00, 0x03, 0x24, 0x23, 
   // chunk: 22
   // chunk name: FT0110
  0x20, 0x22, 0x02, 0x20, 0x22, 0x00, 
  0x24, 0x25, 0x22, 0x24, 0x23, 0x01, 
  0x07, 0x24, 0x23, 0x07, 0x03, 0x03, 
  0x20, 0x22, 0x02, 0x03, 0x04, 0x00, 
  0x24, 0x25, 0x22, 0x03, 0x00, 0x07, 
  0x07, 0x24, 0x23, 0x03, 0x01, 0x00, 
   // chunk: 23
   // chunk name: FT0111
  0x00, 0x20, 0x22, 0x20, 0x22, 0x07, 
  0x20, 0x26, 0x23, 0x24, 0x25, 0x22, 
  0x24, 0x23, 0x04, 0x03, 0x24, 0x23, 
  0x01, 0x20, 0x22, 0x04, 0x20, 0x22, 
  0x20, 0x26, 0x23, 0x03, 0x24, 0x23, 
  0x24, 0x23, 0x07, 0x03, 0x02, 0x00, 
   // chunk: 24
   // chunk name: FT1000
  0x00, 0x07, 0x00, 0x04, 0x00, 0x00, 
  0x00, 0x00, 0x02, 0x03, 0x07, 0x00, 
  0x03, 0x03, 0x04, 0x03, 0x04, 0x03, 
  0x00, 0x20, 0x22, 0x20, 0x22, 0x00, 
  0x20, 0x26, 0x25, 0x26, 0x25, 0x22, 
  0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 
   // chunk: 25
   // chunk name: FT1001
  0x07, 0x00, 0x04, 0x03, 0x00, 0x07, 
  0x00, 0x04, 0x03, 0x03, 0x20, 0x22, 
  0x03, 0x03, 0x04, 0x01, 0x24, 0x23, 
  0x20, 0x22, 0x07, 0x20, 0x22, 0x07, 
  0x24, 0x25, 0x22, 0x24, 0x25, 0x22, 
  0x00, 0x24, 0x23, 0x07, 0x24, 0x23, 
   // chunk: 26
   // chunk name: FT1010
  0x00, 0x01, 0x00, 0x01, 0x20, 0x22, 
  0x02, 0x00, 0x01, 0x07, 0x24, 0x23, 
  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
  0x01, 0x07, 0x20, 0x22, 0x00, 0x01, 
  0x00, 0x01, 0x24, 0x23, 0x02, 0x00, 
  0x01, 0x00, 0x01, 0x00, 0x01, 0x07, 
   // chunk: 27
   // chunk name: FT1011
  0x00, 0x20, 0x22, 0x20, 0x22, 0x00, 
  0x07, 0x24, 0x23, 0x24, 0x25, 0x22, 
  0x03, 0x03, 0x03, 0x03, 0x24, 0x23, 
  0x00, 0x00, 0x07, 0x04, 0x20, 0x22, 
  0x01, 0x20, 0x22, 0x20, 0x26, 0x23, 
  0x00, 0x24, 0x23, 0x24, 0x23, 0x07, 
   // chunk: 28
   // chunk name: FT1100
  0x20, 0x22, 0x00, 0x03, 0x00, 0x07, 
  0x24, 0x25, 0x22, 0x03, 0x04, 0x00, 
  0x20, 0x26, 0x25, 0x22, 0x03, 0x03, 
  0x24, 0x25, 0x26, 0x23, 0x00, 0x07, 
  0x20, 0x26, 0x23, 0x20, 0x22, 0x01, 
  0x24, 0x23, 0x02, 0x24, 0x23, 0x00, 
   // chunk: 29
   // chunk name: FT1101
  0x00, 0x02, 0x00, 0x03, 0x07, 0x00, 
  0x20, 0x22, 0x07, 0x03, 0x20, 0x22, 
  0x24, 0x23, 0x01, 0x03, 0x24, 0x23, 
  0x07, 0x20, 0x22, 0x04, 0x20, 0x22, 
  0x20, 0x26, 0x25, 0x22, 0x24, 0x23, 
  0x24, 0x23, 0x24, 0x23, 0x07, 0x01, 
   // chunk: 30
   // chunk name: FT1110
  0x00, 0x20, 0x22, 0x20, 0x22, 0x00, 
  0x01, 0x24, 0x25, 0x26, 0x23, 0x01, 
  0x20, 0x22, 0x24, 0x23, 0x03, 0x03, 
  0x24, 0x23, 0x04, 0x03, 0x03, 0x02, 
  0x02, 0x20, 0x22, 0x20, 0x22, 0x07, 
  0x07, 0x24, 0x23, 0x24, 0x23, 0x00, 
   // chunk: 31
   // chunk name: FT1111
  0x20, 0x22, 0x20, 0x22, 0x20, 0x22, 
  0x24, 0x25, 0x26, 0x25, 0x26, 0x23, 
  0x20, 0x26, 0x25, 0x26, 0x25, 0x22, 
  0x24, 0x25, 0x26, 0x25, 0x26, 0x23, 
  0x20, 0x26, 0x20, 0x22, 0x25, 0x22, 
  0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 
   // chunk: 32
   // chunk name: SW0000
  0x0D, 0x0D, 0x0C, 0x05, 0x0C, 0x0C, 
  0x0D, 0x0D, 0x0A, 0x0A, 0x0A, 0x0C, 
  0x05, 0x0A, 0x05, 0x05, 0x05, 0x05, 
  0x0A, 0x00, 0x0A, 0x05, 0x0A, 0x0C, 
  0x0C, 0x0D, 0x0D, 0x05, 0x0C, 0x0A, 
  0x0C, 0x0D, 0x0D, 0x0A, 0x0C, 0x0C, 
   // chunk: 33
   // chunk name: SW0001
  0x0C, 0x0C, 0x0A, 0x05, 0x0D, 0x0D, 
  0x0C, 0x0A, 0x0A, 0x0D, 0x0D, 0x0D, 
  0x05, 0x05, 0x05, 0x0D, 0x0D, 0x0D, 
  0x0C, 0x0C, 0x0A, 0x05, 0x0D, 0x0D, 
  0x0C, 0x0A, 0x0C, 0x05, 0x0D, 0x0D, 
  0x0C, 0x0C, 0x0C, 0x05, 0x0D, 0x0D, 
   // chunk: 34
   // chunk name: SW0010
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x0A, 0x0D, 0x0D, 0x0D, 0x0D, 0x0A, 
  0x0A, 0x05, 0x0A, 0x05, 0x0A, 0x05, 
  0x0C, 0x0A, 0x0C, 0x03, 0x0D, 0x0D, 
  0x0D, 0x0C, 0x0C, 0x03, 0x0D, 0x0D, 
   // chunk: 35
   // chunk name: SW0011
  0x0C, 0x0D, 0x0D, 0x0A, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0A, 0x0D, 0x0D, 0x0D, 
  0x05, 0x0A, 0x0A, 0x0D, 0x0D, 0x0A, 
  0x05, 0x05, 0x05, 0x0A, 0x0D, 0x0D, 
  0x05, 0x05, 0x05, 0x0A, 0x0D, 0x0D, 
  0x05, 0x05, 0x05, 0x05, 0x0C, 0x0C, 
   // chunk: 36
   // chunk name: SW0100
  0x0D, 0x0D, 0x0A, 0x05, 0x0C, 0x0C, 
  0x0D, 0x0D, 0x0D, 0x05, 0x0A, 0x0A, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x05, 0x05, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0A, 0x0C, 
  0x0D, 0x0D, 0x0D, 0x05, 0x0A, 0x0C, 
  0x0D, 0x0D, 0x0A, 0x05, 0x0C, 0x0C, 
   // chunk: 37
   // chunk name: SW0101
  0x0D, 0x0D, 0x0A, 0x05, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x05, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x0A, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0A, 0x05, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0C, 0x0A, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0C, 0x05, 0x0D, 0x0D, 
   // chunk: 38
   // chunk name: SW0110
  0x0D, 0x0D, 0x0A, 0x0D, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0A, 
  0x0C, 0x0D, 0x0D, 0x0A, 0x05, 0x05, 
  0x0D, 0x0D, 0x0C, 0x05, 0x0A, 0x0C, 
  0x0D, 0x0D, 0x0D, 0x05, 0x0C, 0x0A, 
  0x0A, 0x0D, 0x0D, 0x05, 0x0A, 0x0C, 
   // chunk: 39
   // chunk name: SW0111
  0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0A, 0x05, 0x0D, 0x0D, 
  0x0A, 0x0D, 0x0D, 0x0A, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x05, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0C, 0x05, 0x0A, 0x0C, 
   // chunk: 40
   // chunk name: SW1000
  0x0C, 0x0C, 0x0C, 0x05, 0x0A, 0x0A, 
  0x0C, 0x0C, 0x0A, 0x05, 0x0C, 0x0A, 
  0x05, 0x05, 0x0A, 0x05, 0x0A, 0x05, 
  0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
   // chunk: 41
   // chunk name: SW1001
  0x0C, 0x0C, 0x0A, 0x05, 0x0C, 0x0C, 
  0x0C, 0x0A, 0x05, 0x05, 0x0D, 0x0D, 
  0x05, 0x05, 0x0A, 0x0A, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0C, 0x0D, 0x0D, 0x0C, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x0C, 0x0D, 0x0D, 0x0C, 0x0D, 0x0D, 
   // chunk: 42
   // chunk name: SW1010
  0x0C, 0x0A, 0x0C, 0x0A, 0x0D, 0x0D, 
  0x0A, 0x0C, 0x0A, 0x0C, 0x0D, 0x0D, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x0A, 0x0C, 0x0D, 0x0D, 0x0C, 0x0A, 
  0x0C, 0x0A, 0x0D, 0x0D, 0x0A, 0x0C, 
  0x0A, 0x0C, 0x0A, 0x0C, 0x0A, 0x0C, 
   // chunk: 43
   // chunk name: SW1011
  0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 
  0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x05, 0x05, 0x0A, 0x05, 0x0D, 0x0D, 
  0x0C, 0x0C, 0x0C, 0x0A, 0x0D, 0x0D, 
  0x0A, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 
   // chunk: 44
   // chunk name: SW1100
  0x0D, 0x0D, 0x0C, 0x05, 0x05, 0x0C, 
  0x0D, 0x0D, 0x0D, 0x05, 0x0A, 0x05, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x05, 0x05, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x05, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0A, 
  0x0D, 0x0D, 0x0A, 0x0D, 0x0D, 0x0C, 
   // chunk: 45
   // chunk name: SW1101
  0x0C, 0x0A, 0x05, 0x05, 0x0C, 0x0A, 
  0x0D, 0x0D, 0x0C, 0x05, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0A, 0x0A, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x0A, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0A, 
   // chunk: 46
   // chunk name: SW1110
  0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 
  0x0A, 0x0D, 0x0D, 0x0D, 0x0D, 0x0A, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x05, 0x05, 
  0x0D, 0x0D, 0x05, 0x0A, 0x05, 0x0A, 
  0x0A, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 
  0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 
   // chunk: 47
   // chunk name: SW1111
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 
   // chunk: 48
   // chunk name: FL0000
  0x1F, 0x1F, 0x00, 0x05, 0x00, 0x00, 
  0x1F, 0x1F, 0x02, 0x05, 0x00, 0x00, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x01, 0x02, 0x05, 0x05, 0x05, 0x00, 
  0x00, 0x1F, 0x1F, 0x05, 0x00, 0x02, 
  0x00, 0x1F, 0x1F, 0x05, 0x00, 0x00, 
   // chunk: 49
   // chunk name: FL0001
  0x00, 0x00, 0x01, 0x05, 0x1F, 0x1F, 
  0x00, 0x01, 0x05, 0x1F, 0x1F, 0x1F, 
  0x05, 0x05, 0x05, 0x1F, 0x1F, 0x1F, 
  0x00, 0x00, 0x01, 0x05, 0x1F, 0x1F, 
  0x00, 0x02, 0x00, 0x05, 0x1F, 0x1F, 
  0x00, 0x00, 0x00, 0x05, 0x1F, 0x1F, 
   // chunk: 50
   // chunk name: FL0010
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x05, 0x1F, 0x1F, 0x1F, 0x1F, 0x05, 
  0x01, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x00, 0x01, 0x00, 0x05, 0x1F, 0x1F, 
  0x02, 0x00, 0x00, 0x05, 0x1F, 0x1F, 
   // chunk: 51
   // chunk name: FL0011
  0x00, 0x1F, 0x1F, 0x01, 0x1F, 0x1F, 
  0x02, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x05, 0x02, 0x02, 0x1F, 0x1F, 0x01, 
  0x05, 0x05, 0x05, 0x02, 0x1F, 0x1F, 
  0x05, 0x05, 0x05, 0x05, 0x1F, 0x1F, 
  0x05, 0x05, 0x05, 0x05, 0x00, 0x00, 
   // chunk: 52
   // chunk name: FL0100
  0x1F, 0x1F, 0x02, 0x05, 0x00, 0x00, 
  0x1F, 0x1F, 0x1F, 0x05, 0x05, 0x02, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x05, 0x05, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x05, 0x00, 
  0x1F, 0x1F, 0x1F, 0x05, 0x05, 0x00, 
  0x1F, 0x1F, 0x02, 0x05, 0x00, 0x00, 
   // chunk: 53
   // chunk name: FL0101
  0x1F, 0x1F, 0x02, 0x05, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x1F, 0x05, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x1F, 0x05, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x01, 0x05, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x00, 0x05, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x00, 0x05, 0x1F, 0x1F, 
   // chunk: 54
   // chunk name: FL0110
  0x1F, 0x1F, 0x02, 0x1F, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x02, 0x1F, 0x1F, 0x02, 0x05, 0x05, 
  0x1F, 0x1F, 0x02, 0x05, 0x05, 0x00, 
  0x1F, 0x1F, 0x1F, 0x05, 0x00, 0x02, 
  0x02, 0x1F, 0x1F, 0x05, 0x01, 0x00, 
   // chunk: 55
   // chunk name: FL0111
  0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x02, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x01, 0x1F, 0x05, 0x05, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x1F, 0x05, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x1F, 0x05, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x02, 0x05, 0x02, 0x00, 
   // chunk: 56
   // chunk name: FL1000
  0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 
  0x00, 0x00, 0x02, 0x05, 0x02, 0x00, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x00, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   // chunk: 57
   // chunk name: FL1001
  0x02, 0x00, 0x05, 0x05, 0x00, 0x02, 
  0x00, 0x05, 0x05, 0x05, 0x1F, 0x1F, 
  0x05, 0x05, 0x05, 0x01, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x02, 0x1F, 0x1F, 0x02, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x00, 0x1F, 0x1F, 0x02, 0x1F, 0x1F, 
   // chunk: 58
   // chunk name: FL1010
  0x00, 0x01, 0x00, 0x01, 0x1F, 0x1F, 
  0x02, 0x00, 0x01, 0x02, 0x1F, 0x1F, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x01, 0x02, 0x1F, 0x1F, 0x00, 0x01, 
  0x00, 0x01, 0x1F, 0x1F, 0x02, 0x00, 
  0x01, 0x00, 0x01, 0x00, 0x01, 0x02, 
   // chunk: 59
   // chunk name: FL1011
  0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x00, 
  0x02, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x05, 0x05, 0x05, 0x05, 0x1F, 0x1F, 
  0x00, 0x00, 0x02, 0x05, 0x1F, 0x1F, 
  0x01, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x02, 
   // chunk: 60
   // chunk name: FL1100
  0x1F, 0x1F, 0x00, 0x05, 0x00, 0x02, 
  0x1F, 0x1F, 0x1F, 0x05, 0x05, 0x00, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x05, 0x05, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x00, 0x02, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x01, 
  0x1F, 0x1F, 0x02, 0x1F, 0x1F, 0x00, 
   // chunk: 61
   // chunk name: FL1101
  0x00, 0x02, 0x00, 0x05, 0x02, 0x00, 
  0x1F, 0x1F, 0x02, 0x05, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x01, 0x05, 0x1F, 0x1F, 
  0x01, 0x1F, 0x1F, 0x05, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x02, 0x01, 
   // chunk: 62
   // chunk name: FL1110
  0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x00, 
  0x01, 0x1F, 0x1F, 0x1F, 0x1F, 0x01, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x05, 0x05, 
  0x1F, 0x1F, 0x05, 0x05, 0x05, 0x02, 
  0x02, 0x1F, 0x1F, 0x1F, 0x1F, 0x02, 
  0x02, 0x1F, 0x1F, 0x1F, 0x1F, 0x00, 
   // chunk: 63
   // chunk name: FL1111
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   // chunk: 64
   // chunk name: CAFS1010
  0x10, 0x13, 0x14, 0x07, 0x20, 0x22, 
  0x16, 0x17, 0x15, 0x20, 0x26, 0x23, 
  0x1B, 0x1C, 0x1D, 0x24, 0x23, 0x03, 
  0x06, 0x00, 0x06, 0x07, 0x03, 0x03, 
  0x19, 0x14, 0x20, 0x22, 0x20, 0x22, 
  0x16, 0x15, 0x24, 0x23, 0x24, 0x23, 
   // chunk: 65
   // chunk name: BK0000
  0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
  0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
  0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
  0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
  0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
  0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   // chunk: 66
   // chunk name: House
  0x05, 0x05, 0x05, 0x05, 0x05, 0x01, 
  0x01, 0x05, 0x2A, 0x2A, 0x2A, 0x05, 
  0x05, 0x06, 0x2A, 0x2A, 0x2A, 0x05, 
  0x05, 0x03, 0x27, 0x28, 0x27, 0x04, 
  0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 
  0x02, 0x02, 0x01, 0x04, 0x33, 0x05, 
   // chunk: 67
   // chunk name: apple tree
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x20, 0x22, 0x00, 0x00, 
  0x00, 0x00, 0x24, 0x23, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
   // chunk: 68
   // chunk name: interior left
  0x34, 0x33, 0x34, 0x08, 0x08, 0x08, 
  0x32, 0x2E, 0x2E, 0x2E, 0x2E, 0x09, 
  0x31, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x34, 
  0x35, 0x35, 0x08, 0x08, 0x34, 0x33, 
  0x37, 0x37, 0x37, 0x00, 0x37, 0x37, 
   // chunk: 69
   // chunk name: bedroom
  0x37, 0x2E, 0x2E, 0x2E, 0x2E, 0x37, 
  0x37, 0x33, 0x30, 0x30, 0x33, 0x37, 
  0x37, 0x08, 0x2F, 0x2F, 0x08, 0x37, 
  0x37, 0x08, 0x08, 0x08, 0x08, 0x37, 
  0x2E, 0x2E, 0x2E, 0x2E, 0x09, 0x2E, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
   // chunk: 70
   // chunk name: interior shop
  0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
  0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
  0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   // chunk: 71
   // chunk name: interior Inn
  0x2E, 0x2E, 0x2E, 0x32, 0x09, 0x32, 
  0x33, 0x33, 0x33, 0x31, 0x08, 0x31, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
  0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
  0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   // chunk: 72
   // chunk name: interior  Tree
  0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
  0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
  0x37, 0x37, 0x05, 0x06, 0x05, 0x37, 
  0x37, 0x37, 0x05, 0x05, 0x05, 0x37, 
  0x37, 0x37, 0x05, 0x05, 0x06, 0x37, 
  0x37, 0x37, 0x37, 0x00, 0x37, 0x37, 
   // chunk: 73
   // chunk name: interior Cave
  0x0F, 0x17, 0x17, 0x17, 0x17, 0x10, 
  0x1A, 0x1C, 0x1C, 0x1C, 0x1C, 0x18, 
  0x1A, 0x05, 0x05, 0x05, 0x05, 0x18, 
  0x1A, 0x05, 0x03, 0x03, 0x05, 0x18, 
  0x1A, 0x05, 0x05, 0x05, 0x05, 0x18, 
  0x12, 0x19, 0x14, 0x00, 0x13, 0x11, 
   // chunk: 74
   // chunk name: Big Tree
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x05, 0x00, 0x07, 0x00, 0x01, 
  0x00, 0x00, 0x20, 0x21, 0x22, 0x00, 
  0x07, 0x00, 0x24, 0x29, 0x23, 0x00, 
  0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   // chunk: 75
   // chunk name: Shop
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x2A, 0x2A, 0x2A, 0x2A, 0x05, 
  0x05, 0x2A, 0x2A, 0x2B, 0x2A, 0x05, 
  0x05, 0x27, 0x27, 0x28, 0x27, 0x05, 
  0x05, 0x03, 0x03, 0x03, 0x03, 0x05, 
  0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 
   // chunk: 76
   // chunk name: Battle cave
  0x13, 0x19, 0x19, 0x19, 0x19, 0x14, 
  0x18, 0x05, 0x06, 0x05, 0x05, 0x1A, 
  0x18, 0x05, 0x05, 0x05, 0x06, 0x1A, 
  0x18, 0x0F, 0x17, 0x2D, 0x10, 0x1A, 
  0x16, 0x15, 0x1C, 0x29, 0x16, 0x15, 
  0x1B, 0x1D, 0x05, 0x06, 0x1B, 0x1D, 
   // chunk: 77
   // chunk name: Inn
  0x05, 0x2A, 0x2A, 0x2A, 0x2A, 0x05, 
  0x05, 0x2A, 0x2A, 0x2C, 0x2A, 0x05, 
  0x02, 0x27, 0x27, 0x27, 0x27, 0x02, 
  0x03, 0x27, 0x27, 0x28, 0x27, 0x04, 
  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
  0x33, 0x03, 0x33, 0x03, 0x33, 0x03, 
   // chunk: 78
   // chunk name: Your House
  0x06, 0x2A, 0x2A, 0x2A, 0x20, 0x22, 
  0x01, 0x2A, 0x2A, 0x2A, 0x2A, 0x23, 
  0x03, 0x27, 0x2A, 0x2A, 0x2A, 0x07, 
  0x03, 0x02, 0x27, 0x28, 0x27, 0x04, 
  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
  0x33, 0x33, 0x01, 0x03, 0x01, 0x01, 
   // chunk: 79
   // chunk name: your interior f
  0x08, 0x08, 0x08, 0x34, 0x33, 0x34, 
  0x2E, 0x09, 0x2E, 0x32, 0x2E, 0x32, 
  0x08, 0x08, 0x08, 0x31, 0x32, 0x31, 
  0x35, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x35, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x37, 0x37, 0x37, 0x00, 0x37, 0x37, 
   // chunk: 80
   // chunk name: interior Inn 2
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x34, 
  0x08, 0x08, 0x08, 0x33, 0x33, 0x33, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x37, 0x37, 0x37, 0x00, 0x37, 0x37, 
   // chunk: 81
   // chunk name: Tree House
  0x20, 0x22, 0x20, 0x22, 0x20, 0x22, 
  0x24, 0x2A, 0x2A, 0x2A, 0x2A, 0x23, 
  0x07, 0x27, 0x27, 0x28, 0x27, 0x22, 
  0x20, 0x36, 0x36, 0x36, 0x36, 0x23, 
  0x24, 0x36, 0x36, 0x36, 0x25, 0x22, 
  0x07, 0x24, 0x23, 0x09, 0x24, 0x23, 
};

PROGMEM const unsigned char bm_tileset[] = {
   // Bitmap Image. No transparency
   // Width: 16 Height: 16
   16, 16, 
   // Frame 0
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,
   // Frame 1
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,
   // Frame 1
   0xFF,   0xFF,   0xE3,   0xC7,   0xFF,   0xE7,   0xF3,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,
   // Frame 2
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xE3,   0xC7,   0xFF,   0xE7,   0xF3,   0xFF,   0xFF,
   // Frame 2
   0xFF,   0xFF,   0xE7,   0xE7,   0x99,   0x99,   0xE7,   0xE7,   0xFF,   0xFF,   0xF9,   0xF3,   0xFF,   0xE3,   0xF1,   0xFF,
   // Frame 3
   0xFF,   0xFF,   0xE3,   0xC7,   0xFF,   0xE7,   0xF3,   0xFF,   0xFF,   0xF3,   0xF3,   0xCC,   0xCC,   0xF3,   0xF3,   0xFF,
   // Frame 3
   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,
   // Frame 4
   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,
   // Frame 4
   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,   0xFF,   0xE3,   0xC7,   0xFF,   0xE7,   0xF3,   0xFF,   0xFF,
   // Frame 5
   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,   0xAB,   0x7D,   0x7F,   0x7D,   0x7F,   0x7D,   0xAB,   0xFF,
   // Frame 5
   0xFF,   0xFF,   0xFF,   0xFB,   0xFF,   0xFF,   0xBF,   0xFF,   0xFF,   0xFF,   0xFE,   0xFF,   0xFF,   0xFF,   0xF7,   0xFF,
   // Frame 6
   0xFF,   0xFB,   0xFF,   0xFF,   0xFF,   0xDF,   0xFF,   0x7F,   0xFF,   0xFF,   0xFF,   0xFD,   0xFF,   0xFF,   0xFF,   0xBF,
   // Frame 6
   0xFF,   0xFF,   0xFF,   0xFB,   0xFF,   0xFF,   0xBF,   0xC7,   0xDB,   0xDB,   0xDA,   0xD7,   0xC7,   0xFF,   0xF7,   0xFF,
   // Frame 7
   0xFF,   0xF9,   0xFA,   0xFA,   0xF9,   0xDF,   0xFF,   0x7F,   0xE3,   0xED,   0xED,   0xED,   0xF3,   0xFF,   0xFF,   0xBF,
   // Frame 7
   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFD,   0xF1,   0xE9,   0xD5,   0xDB,   0xD7,   0xCF,   0xFF,   0xFF,   0xFF,
   // Frame 8
   0xFF,   0xE7,   0xEB,   0xED,   0xEA,   0xF4,   0xF8,   0xFE,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,
   // Frame 8
   0xFE,   0xFD,   0xFB,   0xF7,   0xE7,   0xDB,   0xBD,   0x7E,   0xFE,   0xFD,   0xFB,   0xF7,   0xE7,   0xDB,   0xBD,   0x7E,
   // Frame 9
   0xFE,   0xFD,   0xFB,   0xF7,   0xE7,   0xDB,   0xBD,   0x7E,   0xFE,   0xFD,   0xFB,   0xF7,   0xE7,   0xDB,   0xBD,   0x7E,
   // Frame 9
   0x00,   0xFF,   0xAB,   0x00,   0x62,   0x26,   0x22,   0x66,   0x22,   0x26,   0x62,   0x26,   0x22,   0xFF,   0xAB,   0x00,
   // Frame 10
   0x00,   0xFF,   0xAB,   0x00,   0x62,   0x26,   0x22,   0x66,   0x22,   0x26,   0x62,   0x26,   0x22,   0xFF,   0xAB,   0x00,
   // Frame 10
   0xEE,   0xFF,   0xAB,   0xFF,   0xEE,   0xFF,   0xBB,   0xFF,   0xAE,   0xFF,   0xBB,   0xFF,   0xEA,   0xFF,   0xBB,   0xFF,
   // Frame 11
   0xEE,   0xFF,   0xBB,   0xFF,   0xEA,   0xFF,   0xBB,   0xFF,   0xEE,   0xFF,   0xBB,   0xFF,   0xAE,   0xFF,   0xBB,   0xFF,
   // Frame 11
   0xEE,   0xFF,   0xBA,   0xFF,   0xEE,   0xFF,   0xAB,   0xFF,   0xEE,   0xFF,   0xBB,   0xFF,   0xEE,   0xFF,   0xBB,   0xFF,
   // Frame 12
   0xEE,   0xFF,   0xAB,   0xFF,   0xEE,   0xFF,   0xBA,   0xFF,   0xAE,   0xFF,   0xBB,   0xFF,   0xEA,   0xFF,   0xBA,   0xFF,
   // Frame 12
   0xEE,   0x9B,   0x19,   0x11,   0x00,   0x00,   0x00,   0x00,   0x00,   0x01,   0x01,   0x83,   0xC6,   0xFF,   0xBB,   0xFF,
   // Frame 13
   0xEE,   0xFF,   0xBB,   0xFF,   0xEE,   0xFE,   0xBA,   0xFE,   0xC6,   0x83,   0x83,   0x83,   0x82,   0xD7,   0xBB,   0xFF,
   // Frame 13
   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x57,   0xAE,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAB,   0x57,
   // Frame 14
   0xAB,   0x57,   0xAB,   0x57,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x57,   0xAE,   0x57,   0xAB,   0x57,
   // Frame 14
   0xAE,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x5D,   0xAE,   0x57,
   // Frame 15
   0xAE,   0x5D,   0xAE,   0x57,   0xAE,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAB,   0x57,   0xAE,   0x5D,   0xAE,   0x5D,
   // Frame 15
   0x3F,   0xCF,   0xF7,   0xFB,   0xFD,   0xFD,   0xFE,   0xFE,   0xFE,   0xFE,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,
   // Frame 16
   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x07,   0x01,   0xC0,   0xB0,   0x78,   0x78,   0x74,   0x76,   0x86,
   // Frame 16
   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFD,   0xFD,   0xFB,   0xF7,   0xCF,   0x3F,
   // Frame 17
   0x86,   0x7A,   0xFC,   0xFC,   0x18,   0xE0,   0xC0,   0x01,   0x03,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,
   // Frame 17
   0x61,   0x6E,   0x2E,   0x1E,   0x1E,   0x0D,   0x03,   0x80,   0xE0,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,
   // Frame 18
   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7F,   0x7F,   0x7F,   0x7F,   0xBF,   0xBF,   0xDF,   0xEF,   0xF3,   0xFC,
   // Frame 18
   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xC0,   0x80,   0x03,   0x07,   0x18,   0x3F,   0x3F,   0x5E,   0x61,
   // Frame 19
   0xFC,   0xF3,   0xEF,   0xDF,   0xBF,   0xBF,   0x7F,   0x7F,   0x7F,   0x7F,   0x7F,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,
   // Frame 19
   0x1F,   0xEF,   0xF7,   0xF7,   0xEF,   0xC7,   0x3B,   0xBD,   0xDD,   0xDE,   0xDE,   0x1E,   0x6D,   0x73,   0x77,   0x77,
   // Frame 20
   0x8E,   0x71,   0xFB,   0xFB,   0x1B,   0xE0,   0xEF,   0x0F,   0x03,   0xC1,   0xF0,   0xF8,   0xFC,   0xFC,   0xFE,   0xFE,
   // Frame 20
   0x6D,   0x6E,   0x6E,   0x1E,   0xDD,   0xC1,   0xDD,   0xDE,   0xBE,   0x3E,   0xDE,   0xCD,   0xD3,   0xBF,   0x7F,   0xFF,
   // Frame 21
   0xFE,   0xFE,   0xFC,   0xFC,   0xF8,   0xF0,   0xC1,   0x03,   0x07,   0xF7,   0xF0,   0xEF,   0x1F,   0xDF,   0xEE,   0xF1,
   // Frame 21
   0x7F,   0x7F,   0x3F,   0x3F,   0x1F,   0x0F,   0x83,   0xC0,   0xF0,   0xF7,   0x07,   0xD8,   0xDF,   0xDF,   0x8E,   0x71,
   // Frame 22
   0xEE,   0xEE,   0xCE,   0xB6,   0x78,   0x7B,   0x7B,   0xBB,   0xBD,   0x1C,   0xE3,   0xF7,   0xEF,   0xEF,   0xC7,   0x38,
   // Frame 22
   0x71,   0x8E,   0xDF,   0xDF,   0xD8,   0x07,   0xF7,   0xF0,   0xC0,   0x83,   0x0F,   0x1F,   0x3F,   0x3F,   0x7F,   0x7F,
   // Frame 23
   0x38,   0xC7,   0xEF,   0xEF,   0xF7,   0xE3,   0x1C,   0xBD,   0xBB,   0x7B,   0x7B,   0x78,   0xB6,   0xCE,   0xDE,   0xDE,
   // Frame 23
   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,
   // Frame 24
   0xEE,   0xEE,   0xEE,   0xC4,   0x38,   0xBC,   0xBE,   0x7E,   0x7E,   0x7E,   0x7E,   0x3C,   0xC0,   0xDC,   0xDE,   0xDE,
   // Frame 24
   0x38,   0xC7,   0xEF,   0xEF,   0x0E,   0xF5,   0xF3,   0x00,   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,
   // Frame 25
   0x86,   0x79,   0x7B,   0x7B,   0x30,   0xCF,   0xEF,   0x00,   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,
   // Frame 25
   0x7B,   0x7B,   0x3B,   0x03,   0x3C,   0x7E,   0x7E,   0x7E,   0x7E,   0x7D,   0x3D,   0x1C,   0x23,   0x77,   0x77,   0x77,
   // Frame 26
   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,
   // Frame 26
   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,   0x00,   0xF3,   0xF5,   0x0E,   0xEF,   0xEF,   0xC7,   0x38,
   // Frame 27
   0x00,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x00,   0x00,   0xEF,   0xCF,   0x30,   0x7B,   0x7B,   0x79,   0x86,
   // Frame 27
   0x0C,   0xF3,   0xF7,   0xF7,   0xE3,   0xDC,   0x3F,   0xBF,   0xBF,   0xBF,   0xBF,   0x0E,   0xF1,   0xFB,   0xFB,   0xFB,
   // Frame 28
   0xFF,   0xFE,   0xFD,   0xFD,   0xFD,   0xF0,   0xEF,   0xDF,   0xDF,   0xDF,   0xDF,   0xC3,   0xBC,   0x7E,   0x7D,   0x7D,
   // Frame 28
   0xF7,   0xF7,   0xF7,   0xE3,   0x1C,   0xBF,   0xBF,   0xBF,   0x7F,   0x7F,   0x7F,   0x3E,   0xCD,   0xF3,   0xFB,   0xFB,
   // Frame 29
   0x7D,   0x7D,   0xB1,   0x8E,   0xBF,   0xBF,   0x7F,   0x7F,   0x7F,   0x7F,   0xBF,   0x8E,   0xB1,   0x7B,   0x7B,   0x7B,
   // Frame 29
   0xFB,   0xF7,   0xF7,   0xF3,   0x0C,   0xBF,   0xBF,   0xBF,   0xBF,   0x3F,   0xDE,   0xE1,   0xF7,   0xF7,   0xF3,   0x00,
   // Frame 30
   0x7B,   0x7D,   0x7D,   0xB8,   0xC7,   0xDF,   0xDF,   0xDF,   0xDF,   0xEF,   0xF0,   0xFD,   0xFD,   0xFD,   0xFE,   0xFF,
   // Frame 30
   0x3F,   0xDF,   0xEF,   0xF7,   0xFB,   0xFD,   0xFD,   0xFD,   0xFD,   0xA9,   0x55,   0xAB,   0x57,   0xAF,   0x5F,   0x3F,
   // Frame 31
   0xE0,   0x8A,   0x55,   0x2B,   0x7F,   0x2B,   0x55,   0x2A,   0x55,   0x2B,   0x57,   0x2A,   0x81,   0x80,   0xC0,   0xE0,
   // Frame 31
   0xFF,   0xCE,   0x18,   0x21,   0xFF,   0x21,   0x18,   0xCE,   0xFF,   0x3F,   0x7F,   0xD5,   0xAB,   0xD5,   0x7F,   0x3F,
   // Frame 32
   0xFF,   0x7F,   0xFF,   0xAA,   0x57,   0xAA,   0xFF,   0x7F,   0xFF,   0xE7,   0x8C,   0x10,   0xFF,   0x10,   0x8C,   0xE7,
   // Frame 32
   0xFF,   0xFF,   0x3F,   0xDF,   0xEF,   0xF7,   0xBB,   0x5B,   0xAD,   0x55,   0xFD,   0xFE,   0xEE,   0xD6,   0xEA,   0xD6,
   // Frame 33
   0x47,   0x50,   0xAA,   0x5F,   0xBF,   0x7F,   0xFE,   0x7D,   0xFA,   0xFD,   0xFA,   0xF5,   0xEA,   0xD5,   0xEB,   0xD5,
   // Frame 33
   0xEE,   0xD6,   0xEE,   0xD6,   0xAE,   0xDE,   0xAE,   0xDE,   0xAE,   0xDE,   0xAE,   0xDE,   0xAE,   0xD6,   0xEE,   0xD6,
   // Frame 34
   0xEB,   0xD5,   0xEB,   0xD5,   0xAB,   0xD7,   0xAB,   0xD7,   0xAB,   0xD7,   0xAB,   0xD7,   0xAB,   0xD5,   0xEB,   0xD5,
   // Frame 34
   0xEE,   0xFE,   0xFE,   0xFC,   0xFA,   0x55,   0xAD,   0x5D,   0xBB,   0xFB,   0xF7,   0xCF,   0x9F,   0x3F,   0xFF,   0xFF,
   // Frame 35
   0xEB,   0xD5,   0xEB,   0xF5,   0xFA,   0xFD,   0xFA,   0xFD,   0xFE,   0x7F,   0xBF,   0x5F,   0xAA,   0x55,   0xA8,   0x07,
   // Frame 35
   0xAF,   0x57,   0xAF,   0x57,   0xAB,   0x55,   0xAA,   0x95,   0xAA,   0x55,   0xAA,   0x95,   0xCA,   0xE5,   0xF2,   0xFC,
   // Frame 36
   0x5C,   0x6D,   0xBC,   0xC5,   0xF6,   0xEB,   0xD7,   0xD7,   0xDF,   0xDE,   0xED,   0xF3,   0xFF,   0xFF,   0xFF,   0xFF,
   // Frame 36
   0xFC,   0xF1,   0xEA,   0xD5,   0xAA,   0x95,   0x2A,   0x95,   0xAA,   0x95,   0xAB,   0x57,   0xAB,   0x57,   0xAF,   0x57,
   // Frame 37
   0xFF,   0xFF,   0xFF,   0xFF,   0xF3,   0xED,   0xDE,   0xDF,   0xD7,   0xD7,   0xEB,   0xF7,   0xC6,   0xBD,   0x6C,   0x5D,
   // Frame 37
   0xAF,   0x57,   0x2F,   0xD7,   0xEB,   0xF5,   0xBA,   0x59,   0xAC,   0x55,   0xFC,   0xFE,   0xEE,   0xD6,   0xEA,   0xD6,
   // Frame 38
   0x04,   0x50,   0xAA,   0x5F,   0xBF,   0x7F,   0xFE,   0x7D,   0xFA,   0xFD,   0xFA,   0xF5,   0xEA,   0xD5,   0xEB,   0xD5,
   // Frame 38
   0xEE,   0xFE,   0xFE,   0xFC,   0xFA,   0x55,   0xAC,   0x5D,   0xBA,   0xF9,   0xF3,   0xC7,   0x8B,   0x17,   0xAF,   0x57,
   // Frame 39
   0xEB,   0xD5,   0xEB,   0xF5,   0xFA,   0xFD,   0xFA,   0xFD,   0xFE,   0x7F,   0xBF,   0x5F,   0xAA,   0x55,   0xA8,   0x05,
   // Frame 39
   0x00,   0xFD,   0xFD,   0xFD,   0xFD,   0x05,   0x15,   0x15,   0x15,   0x15,   0x05,   0xFD,   0xFD,   0xFD,   0xFD,   0x00,
   // Frame 40
   0x00,   0x6F,   0x6F,   0x6F,   0x6C,   0x1A,   0x6A,   0x6A,   0x6A,   0x6A,   0x1A,   0x6C,   0x6F,   0x6F,   0x6F,   0x00,
   // Frame 40
   0xFD,   0xFD,   0x01,   0xF9,   0x79,   0x01,   0xF9,   0xF9,   0xF9,   0xF9,   0x01,   0xF9,   0xF9,   0x01,   0xFD,   0xFD,
   // Frame 41
   0x7F,   0x7F,   0x80,   0xBC,   0xB9,   0x81,   0xB8,   0xBF,   0xBF,   0xBF,   0x80,   0xBF,   0xBF,   0x80,   0x7F,   0x7F,
   // Frame 41
   0x0F,   0xF3,   0x0B,   0x05,   0x05,   0x05,   0x05,   0x05,   0x05,   0x05,   0x05,   0x05,   0x05,   0x0B,   0xF3,   0x0F,
   // Frame 42
   0x00,   0x7F,   0x80,   0x80,   0xC0,   0xC0,   0xC0,   0xC0,   0xE0,   0xE0,   0xE0,   0xF0,   0xF0,   0x80,   0x7F,   0x00,
   // Frame 42
   0x02,   0xF2,   0xA2,   0x52,   0xA2,   0x52,   0xF2,   0x02,   0x02,   0xF2,   0xA2,   0x52,   0xA2,   0x52,   0xF2,   0x02,
   // Frame 43
   0x00,   0x3F,   0x6A,   0x55,   0x6A,   0x55,   0x3F,   0x00,   0x00,   0x3F,   0x6A,   0x55,   0x6A,   0x55,   0x3F,   0x00,
   // Frame 43
   0x02,   0x72,   0x22,   0x52,   0x22,   0x52,   0x72,   0x02,   0x02,   0x72,   0x22,   0x52,   0x22,   0x52,   0x72,   0x02,
   // Frame 44
   0x7F,   0x53,   0x55,   0x65,   0x7F,   0x41,   0x77,   0x41,   0x7F,   0x63,   0x5D,   0x63,   0x7F,   0x41,   0x75,   0x7B,
   // Frame 44
   0x02,   0x72,   0x22,   0x52,   0x22,   0x52,   0x72,   0x02,   0x02,   0x72,   0x22,   0x52,   0x22,   0x52,   0x72,   0x02,
   // Frame 45
   0x7F,   0x41,   0x7F,   0x41,   0x7B,   0x77,   0x6F,   0x41,   0x7F,   0x41,   0x7B,   0x77,   0x6F,   0x41,   0x7F,   0x7F,
   // Frame 45
   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,   0x7E,
   // Frame 46
   0x00,   0x7F,   0x7F,   0x73,   0x0D,   0x72,   0x33,   0x6F,   0x33,   0x73,   0x1F,   0x6E,   0x71,   0x7F,   0x7F,   0x00,
   // Frame 46
   0x7A,   0xFA,   0x7A,   0xBA,   0x7A,   0xFA,   0x7A,   0xFA,   0x7A,   0xFA,   0x7A,   0xBA,   0x7A,   0xFA,   0x7A,   0xFA,
   // Frame 47
   0x6F,   0x6F,   0x6F,   0x6E,   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,   0x6F,   0x6E,   0x6F,   0x6F,   0x6F,   0x6F,
   // Frame 47
   0x00,   0xBD,   0xBF,   0x7F,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0xFF,   0x7F,   0xBF,   0xBD,   0x00,
   // Frame 48
   0x80,   0x7E,   0x7E,   0x80,   0x9A,   0x9A,   0x9A,   0x1A,   0x9A,   0x9A,   0x9A,   0x9A,   0x80,   0x7E,   0x7E,   0x00,
   // Frame 48
   0x00,   0xDA,   0xDA,   0xC1,   0x15,   0xE5,   0xE5,   0xE4,   0xE4,   0xE5,   0xE5,   0x15,   0xC1,   0xDA,   0xDA,   0x01,
   // Frame 49
   0x00,   0xDD,   0xEE,   0xEE,   0xEE,   0xEE,   0xEE,   0xEE,   0xEE,   0xEE,   0xEE,   0xEE,   0xEE,   0xEE,   0xDD,   0x00,
   // Frame 49
   0x00,   0xFF,   0x20,   0x36,   0x36,   0x36,   0x32,   0x34,   0x32,   0x30,   0x36,   0x30,   0x36,   0x20,   0xFF,   0x00,
   // Frame 50
   0x80,   0x5F,   0x50,   0x9B,   0x98,   0x9B,   0x9B,   0x18,   0x9B,   0x98,   0x9B,   0x98,   0x9B,   0x50,   0x5F,   0x00,
   // Frame 50
   0x01,   0xBE,   0xBE,   0xBE,   0xBE,   0xBE,   0xBE,   0xBE,   0xBE,   0xBE,   0xBE,   0xBE,   0xBE,   0xBE,   0xBE,   0x01,
   // Frame 51
   0x00,   0xFF,   0x40,   0x6C,   0x60,   0x6C,   0x6C,   0x60,   0x6C,   0x60,   0x6C,   0x60,   0x6C,   0x40,   0xFF,   0x00,
   // Frame 51
   0x01,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0xFE,   0x01,
   // Frame 52
   0xF0,   0x8B,   0x6B,   0x6B,   0x8B,   0xCB,   0x8B,   0x4B,   0xCB,   0xCB,   0xCB,   0x8B,   0x6B,   0x6B,   0x8B,   0x70,
   // Frame 52
   0xFE,   0xFD,   0xFB,   0x37,   0xC7,   0xDB,   0xDD,   0xDE,   0xDE,   0xDD,   0xDB,   0xD7,   0x27,   0xDB,   0xBD,   0x7E,
   // Frame 53
   0xFE,   0xFD,   0xFB,   0xF6,   0xC1,   0xDD,   0xAD,   0x71,   0xF1,   0xED,   0xDD,   0xC1,   0xE6,   0xDB,   0xBD,   0x7E,
   // Frame 53
   0xFE,   0x1D,   0x8B,   0x73,   0xED,   0x95,   0x0A,   0x0A,   0x0A,   0x0A,   0x95,   0xED,   0x73,   0x8B,   0x1D,   0x7E,
   // Frame 54
   0xFE,   0xF0,   0xCB,   0x96,   0xAD,   0x5D,   0x2B,   0x5B,   0x2B,   0x5B,   0x2D,   0x95,   0xAA,   0xC5,   0xB0,   0x7E,
   // Frame 54
   0xCD,   0x00,   0xFE,   0xFA,   0xFE,   0xFE,   0xFE,   0x00,   0xCD,   0x00,   0xFE,   0xFA,   0xFE,   0xFE,   0xFE,   0x00,
   // Frame 55
   0x9B,   0x00,   0x3F,   0x3F,   0x3F,   0x2F,   0x3F,   0x00,   0x9B,   0x00,   0x3F,   0x3F,   0x3F,   0x2F,   0x3F,   0x00,
   // Frame 55
   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
   // Frame 56
   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,
};




#define TOTAL_REGIONS     20
#define LEVEL_CHUNK_W    32
#define LEVEL_CHUNK_H    32


const unsigned char PROGMEM regions[] = 
{
  // region: 0
  // region name: Canyons
  0x00, 0x00, 0x0E, 0x0E, 
  // region: 1
  // region name: Forest
  0x0F, 0x00, 0x11, 0x0F, 
  // region: 2
  // region name: Canyon Forest
  0x0E, 0x00, 0x01, 0x0E, 
  // region: 3
  // region name: Forest swamp
  0x10, 0x0F, 0x10, 0x01, 
  // region: 4
  // region name: Swamp fields
  0x0F, 0x0F, 0x01, 0x0F, 
  // region: 5
  // region name: Fields Canyons
  0x00, 0x0E, 0x0F, 0x01, 
  // region: 6
  // region name: swamp island 1
  0x12, 0x16, 0x03, 0x02, 
  // region: 7
  // region name: swamp island 2
  0x18, 0x19, 0x04, 0x02, 
  // region: 8
  // region name: long road
  0x01, 0x14, 0x0E, 0x01, 
  // region: 9
  // region name: Apple Farm
  0x0C, 0x10, 0x03, 0x04, 
  // region: 10
  // region name: House interior
  0x03, 0x1E, 0x01, 0x02, 
  // region: 11
  // region name: shop interior
  0x0A, 0x1F, 0x02, 0x01, 
  // region: 12
  // region name: Inn interior
  0x11, 0x1E, 0x03, 0x02, 
  // region: 13
  // region name: Tree interior
  0x07, 0x1F, 0x01, 0x01, 
  // region: 14
  // region name: Cave interior
  0x0F, 0x1F, 0x01, 0x01, 
  // region: 15
  // region name: Your interior
  0x17, 0x1E, 0x01, 0x02, 
  // region: 16
  // region name: Home
  0x01, 0x19, 0x05, 0x04, 
  // region: 17
  // region name: Swamp
  0x10, 0x10, 0x10, 0x0E, 
  // region: 18
  // region name: Fields
  0x00, 0x0F, 0x0F, 0x0F, 
  // region: 19
  // region name: All Black
  0x00, 0x1E, 0x20, 0x02, 
};


const unsigned char PROGMEM solid_map[] = 
{
  0x12, 0xC4, 0xFF, 0xFF, 
  0x42, 0x11, 0x03, 0x96, 
  0x94, 0x76, 0xE8, 0xD0, 
  0xCD, 0x40, 0x25, 0x83, 
  0x21, 0x5A, 0xB1, 0x94, 
  0x88, 0x59, 0xAB, 0xA6, 
  0x4E, 0x45, 0x02, 0xA0, 
  0x24, 0xC9, 0x68, 0xB5, 
  0x73, 0xC4, 0x47, 0x83, 
  0x46, 0x50, 0x10, 0xA8, 
  0x10, 0x59, 0x9B, 0xAD, 
  0x66, 0x55, 0x42, 0xA4, 
  0x08, 0x44, 0x5F, 0x85, 
  0xBD, 0x68, 0x80, 0xB0, 
  0xFF, 0xFF, 0x37, 0x9E, 
  0xD3, 0xD0, 0xFF, 0xBF, 
  0x49, 0x8A, 0x29, 0xA2, 
  0x11, 0x8A, 0x82, 0x8B, 
  0x7B, 0x89, 0x38, 0x88, 
  0x5B, 0xAA, 0x25, 0xCA, 
  0x01, 0x00, 0x30, 0x92, 
  0x7B, 0xF7, 0xAB, 0xA9, 
  0x51, 0x88, 0x41, 0xA1, 
  0x05, 0x8B, 0x4A, 0x8C, 
  0x4F, 0xA2, 0x92, 0xBB, 
  0x49, 0x8F, 0xAC, 0x86, 
  0x21, 0x92, 0x29, 0xB0, 
  0x49, 0x95, 0x80, 0xA4, 
  0x49, 0x90, 0x4D, 0x8E, 
  0xFF, 0xFF, 0xFF, 0xFF, 
  0x08, 0x00, 0x8E, 0x00, 
  0x00, 0x04, 0x00, 0x00, 
};



byte getChunk(const Point &chunk_pos);
bool getChunkBit(const byte &chunk_x, const byte &chunk_y);
byte getTileInChunk(const byte &chunk, const Point &tile_pos);
Point world_to_chunk(const Point &world_pos);
bool getSolid(const Point &world_pos);
byte getTileID(const Point &world_pos);
byte getRegion(const Point &chunk_pos);



byte getRegion(const Point &chunk_pos)
{
  for (byte i = 0; i < TOTAL_REGIONS; i++)
  {
      Rect reg = {.x = pgm_read_byte(regions + i * 4), .y = pgm_read_byte(regions + 1 + i * 4),
                .width = pgm_read_byte(regions + 2 + i * 4), .height = pgm_read_byte(regions + 3 + i * 4) };
      if (arduboy.collide(chunk_pos, reg)) return i;
  }
  return 255;     // error
}



byte getTileID(const Point &world_pos)
{
    switch ((world_pos.x >> 4) + (world_pos.y >> 4) * 192)
    {
   }
    
    Point chunk_pos = { .x = world_pos.x / 96, .y = world_pos.y / 96 };
    byte chunk = getChunk(chunk_pos);
    byte tile = getTileInChunk(chunk, world_to_chunk(world_pos));
    
    switch(tile)
    {
      case 14: tile += waterframe; break;
      case 15: tile -= waterframe; break;
      case 33: tile += waterframe; break;
      case 34: tile -= waterframe; break;
    }
    
    return tile;
}



bool getChunkBit(const byte &chunk_x, const byte &chunk_y)
{
  if (chunk_x < 0 || chunk_x >= LEVEL_CHUNK_W
  || chunk_y < 0 || chunk_y >= LEVEL_CHUNK_H)
    return 1;
    
  byte x = chunk_x / 8;           // 8 is number of chunks per byte
  byte y = chunk_y * 4;           // 4 is number of bytes per row
  byte i = chunk_x % 8;

  byte b = (pgm_read_byte(solid_map + x + y) & _BV(i));
  return (b > 0);
}



byte getTileInChunk(const byte &chunk, const Point &tile_pos)
{
  return pgm_read_byte(chunks + ((chunk & 0x7F) * 36) + tile_pos.x + tile_pos.y * 6);
}



bool getSolid(const Point &world_pos)
{
  return (getTileID(world_pos) >= 13);
}



bool getSolid(const int &world_x, const int &world_y)
{
  Point world_pos = {.x = world_x, .y = world_y };
  return (getTileID(world_pos) >= 13);
}



Point world_to_chunk(const Point &world_pos)
{
    Point out = {.x = (world_pos.x % 96) >> 4, .y = (world_pos.y % 96) >> 4 };
    return out;
}



// getChunk
// Returns a value greater than 127 if the chunk was specifically placed.
// If the chunk is part of a region the returned value will be
// less than 128.
// To get the actual chunk value of a specific chunk, AND (&) the returned
// chunk with 0x7F (B01111111)
byte getChunk(const Point &chunk_pos)
{
    // specific chunks
    switch (chunk_pos.x + chunk_pos.y * 32)
    {
        case 172: return 202; break; // Big Tree chunk_x: 12 chunk_y: 5
        case 103: return 202; break; // Big Tree chunk_x: 7 chunk_y: 3
        case 353: return 202; break; // Big Tree chunk_x: 1 chunk_y: 11
        case 427: return 202; break; // Big Tree chunk_x: 11 chunk_y: 13
        case 163: return 204; break; // Battle cave chunk_x: 3 chunk_y: 5
        case 300: return 205; break; // Inn chunk_x: 12 chunk_y: 9
        case 61: return 204; break; // Battle cave chunk_x: 29 chunk_y: 1
        case 59: return 209; break; // Tree House chunk_x: 27 chunk_y: 1
        case 84: return 209; break; // Tree House chunk_x: 20 chunk_y: 2
        case 209: return 205; break; // Inn chunk_x: 17 chunk_y: 6
        case 180: return 202; break; // Big Tree chunk_x: 20 chunk_y: 5
        case 368: return 202; break; // Big Tree chunk_x: 16 chunk_y: 11
        case 379: return 203; break; // Shop chunk_x: 27 chunk_y: 11
        case 253: return 209; break; // Tree House chunk_x: 29 chunk_y: 7
        case 312: return 202; break; // Big Tree chunk_x: 24 chunk_y: 9
        case 570: return 204; break; // Battle cave chunk_x: 26 chunk_y: 17
        case 718: return 204; break; // Battle cave chunk_x: 14 chunk_y: 22
        case 716: return 202; break; // Big Tree chunk_x: 12 chunk_y: 22
        case 776: return 202; break; // Big Tree chunk_x: 8 chunk_y: 24
        case 910: return 202; break; // Big Tree chunk_x: 14 chunk_y: 28
        case 873: return 202; break; // Big Tree chunk_x: 9 chunk_y: 27
        case 737: return 202; break; // Big Tree chunk_x: 1 chunk_y: 23
        case 485: return 202; break; // Big Tree chunk_x: 5 chunk_y: 15
        case 493: return 202; break; // Big Tree chunk_x: 13 chunk_y: 15
        case 513: return 205; break; // Inn chunk_x: 1 chunk_y: 16
        case 515: return 202; break; // Big Tree chunk_x: 3 chunk_y: 16
        case 756: return 205; break; // Inn chunk_x: 20 chunk_y: 23
        case 754: return 203; break; // Shop chunk_x: 18 chunk_y: 23
        case 627: return 202; break; // Big Tree chunk_x: 19 chunk_y: 19
        case 843: return 194; break; // House chunk_x: 11 chunk_y: 26
        case 802: return 194; break; // House chunk_x: 2 chunk_y: 25
        case 801: return 206; break; // Your House chunk_x: 1 chunk_y: 25
        case 520: return 194; break; // House chunk_x: 8 chunk_y: 16
        case 881: return 202; break; // Big Tree chunk_x: 17 chunk_y: 27
        case 631: return 202; break; // Big Tree chunk_x: 23 chunk_y: 19
        case 605: return 202; break; // Big Tree chunk_x: 29 chunk_y: 18
        case 562: return 202; break; // Big Tree chunk_x: 18 chunk_y: 17
        case 340: return 209; break; // Tree House chunk_x: 20 chunk_y: 10
        case 38: return 203; break; // Shop chunk_x: 6 chunk_y: 1
        case 709: return 203; break; // Shop chunk_x: 5 chunk_y: 22
        case 1011: return 208; break; // interior Inn 2 chunk_x: 19 chunk_y: 31
    }


    // regions
    switch (getRegion(chunk_pos))
    {
        case 0:  // Canyons
        {
            if (getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                // solid chunk
                return 15;
            }
            else
            {
                byte b = 0;
                b |= getChunkBit(chunk_pos.x + 1, chunk_pos.y);
                b |= getChunkBit(chunk_pos.x, chunk_pos.y - 1) << 1;
                b |= getChunkBit(chunk_pos.x - 1, chunk_pos.y) << 2;
                b |= getChunkBit(chunk_pos.x, chunk_pos.y + 1) << 3;

                switch (b)
                {
                    case 0: return 0; break;
                    case 1: return 1; break;
                    case 2: return 2; break;
                    case 3: return 3; break;
                    case 4: return 4; break;
                    case 5: return 5; break;
                    case 6: return 6; break;
                    case 7: return 7; break;
                    case 8: return 8; break;
                    case 9: return 9; break;
                    case 10: return 10; break;
                    case 11: return 11; break;
                    case 12: return 12; break;
                    case 13: return 13; break;
                    case 14: return 14; break;
                    case 15: return 15; break;
                }
            }
        } break;
        case 1:  // Forest
        {
            if (getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                // solid chunk
                return 31;
            }
            else
            {
                byte b = 0;
                b |= getChunkBit(chunk_pos.x + 1, chunk_pos.y);
                b |= getChunkBit(chunk_pos.x, chunk_pos.y - 1) << 1;
                b |= getChunkBit(chunk_pos.x - 1, chunk_pos.y) << 2;
                b |= getChunkBit(chunk_pos.x, chunk_pos.y + 1) << 3;

                switch (b)
                {
                    case 0: return 16; break;
                    case 1: return 17; break;
                    case 2: return 18; break;
                    case 3: return 19; break;
                    case 4: return 20; break;
                    case 5: return 21; break;
                    case 6: return 22; break;
                    case 7: return 23; break;
                    case 8: return 24; break;
                    case 9: return 25; break;
                    case 10: return 26; break;
                    case 11: return 27; break;
                    case 12: return 28; break;
                    case 13: return 29; break;
                    case 14: return 30; break;
                    case 15: return 31; break;
                }
            }
        } break;
        case 2:  // Canyon Forest
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 64;
            }

            else
            {
                return 31;
            }
        } break;
        case 3:  // Forest swamp
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 21;
            }

            else
            {
                return 31;
            }
        } break;
        case 4:  // Swamp fields
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 26;
            }

            else
            {
                return 31;
            }
        } break;
        case 5:  // Fields Canyons
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 31;
            }

            else
            {
                return 31;
            }
        } break;
        case 6:  // swamp island 1
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 15;
            }

            else
            {
                return 66;
            }
        } break;
        case 7:  // swamp island 2
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 15;
            }

            else
            {
                return 66;
            }
        } break;
        case 8:  // long road
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 26;
            }

            else
            {
                return 31;
            }
        } break;
        case 9:  // Apple Farm
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 67;
            }

            else
            {
                return 66;
            }
        } break;
        case 10:  // House interior
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 68;
            }

            else
            {
                return 69;
            }
        } break;
        case 11:  // shop interior
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 80;
            }

            else
            {
                return 70;
            }
        } break;
        case 12:  // Inn interior
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 71;
            }

            else
            {
                return 69;
            }
        } break;
        case 13:  // Tree interior
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 72;
            }

            else
            {
                return 65;
            }
        } break;
        case 14:  // Cave interior
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 73;
            }

            else
            {
                return 65;
            }
        } break;
        case 15:  // Your interior
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 79;
            }

            else
            {
                return 69;
            }
        } break;
        case 16:  // Home
        {
            if (getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                // solid chunk
                return 63;
            }
            else
            {
                byte b = 0;
                b |= getChunkBit(chunk_pos.x + 1, chunk_pos.y);
                b |= getChunkBit(chunk_pos.x, chunk_pos.y - 1) << 1;
                b |= getChunkBit(chunk_pos.x - 1, chunk_pos.y) << 2;
                b |= getChunkBit(chunk_pos.x, chunk_pos.y + 1) << 3;

                switch (b)
                {
                    case 0: return 48; break;
                    case 1: return 49; break;
                    case 2: return 50; break;
                    case 3: return 51; break;
                    case 4: return 52; break;
                    case 5: return 53; break;
                    case 6: return 54; break;
                    case 7: return 55; break;
                    case 8: return 56; break;
                    case 9: return 57; break;
                    case 10: return 58; break;
                    case 11: return 59; break;
                    case 12: return 60; break;
                    case 13: return 61; break;
                    case 14: return 62; break;
                    case 15: return 63; break;
                }
            }
        } break;
        case 17:  // Swamp
        {
            if (getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                // solid chunk
                return 47;
            }
            else
            {
                byte b = 0;
                b |= getChunkBit(chunk_pos.x + 1, chunk_pos.y);
                b |= getChunkBit(chunk_pos.x, chunk_pos.y - 1) << 1;
                b |= getChunkBit(chunk_pos.x - 1, chunk_pos.y) << 2;
                b |= getChunkBit(chunk_pos.x, chunk_pos.y + 1) << 3;

                switch (b)
                {
                    case 0: return 32; break;
                    case 1: return 33; break;
                    case 2: return 34; break;
                    case 3: return 35; break;
                    case 4: return 36; break;
                    case 5: return 37; break;
                    case 6: return 38; break;
                    case 7: return 39; break;
                    case 8: return 40; break;
                    case 9: return 41; break;
                    case 10: return 42; break;
                    case 11: return 43; break;
                    case 12: return 44; break;
                    case 13: return 45; break;
                    case 14: return 46; break;
                    case 15: return 47; break;
                }
            }
        } break;
        case 18:  // Fields
        {
            if (getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                // solid chunk
                return 63;
            }
            else
            {
                byte b = 0;
                b |= getChunkBit(chunk_pos.x + 1, chunk_pos.y);
                b |= getChunkBit(chunk_pos.x, chunk_pos.y - 1) << 1;
                b |= getChunkBit(chunk_pos.x - 1, chunk_pos.y) << 2;
                b |= getChunkBit(chunk_pos.x, chunk_pos.y + 1) << 3;

                switch (b)
                {
                    case 0: return 48; break;
                    case 1: return 49; break;
                    case 2: return 50; break;
                    case 3: return 51; break;
                    case 4: return 52; break;
                    case 5: return 53; break;
                    case 6: return 54; break;
                    case 7: return 55; break;
                    case 8: return 56; break;
                    case 9: return 57; break;
                    case 10: return 58; break;
                    case 11: return 59; break;
                    case 12: return 60; break;
                    case 13: return 61; break;
                    case 14: return 62; break;
                    case 15: return 63; break;
                }
            }
        } break;
        case 19:  // All Black
        {
            if (!getChunkBit(chunk_pos.x, chunk_pos.y))
            {
                return 65;
            }

            else
            {
                return 31;
            }
        } break;

    }
    return 0; // default chunk
}



        
void drawTiles()
{
  int cx = (cam.x >> 4) << 4;
  int cy = (cam.y >> 4) << 4;
  for (int x = 0; x <= 128; x += 16)
  {
     for (int y = 0; y <= 64; y += 16)
     {
        int ccx = cx + x;
        int ccy = cy + y;
        Point pos = {.x = cam.x + x, .y = cam.y + y };
        byte tile = getTileID(pos);
        sprites.drawOverwrite(ccx - cam.x, ccy - cam.y, bm_tileset, tile);
     }
  }
}


#define TOTAL_DOORS   0

const unsigned char PROGMEM doors[] = 
{
};


void checkDoors()
{
    Point p;
    p.x = player.x;
    p.y = player.y;
    for (byte i = 0; i < TOTAL_DOORS * 2; i++)
    {
        Rect door = {.x = pgm_read_byte(doors + i * 2) * 16 - 3, .y = pgm_read_byte(doors + 1 + i * 2) * 16,
                    .width = 10, .height = 10 };

        if (arduboy.collide(p, door))
        {
            int8_t offset = 2; // exterior
            if (i % 2 == 1) offset = -2; // interior
            player.x = pgm_read_byte(doors + offset + i * 2) * 16;
            player.y = (pgm_read_byte(doors + offset + 1 + i * 2)) * 16 - (offset * 6);
            player.walking = false;
        }
    }
}
#endif
